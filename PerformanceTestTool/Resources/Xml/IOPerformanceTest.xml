<?xml version="1.0" encoding="utf-8"?>
<tasks description="IO Performance Test.&#xD;&#xA;When finished, apply the Stylesheet &quot;IO Performance Statistics&quot; from the default Stylesheet Collection.&#xD;&#xA;" connections="5" timeBetweenConnections="0" performanceCountersSamplingInterval="0" mode="Serial" usePooling="True" minPooling="0" maxPooling="100">
	<task name="Create test database" sql="use [master]&#xD;&#xA;&#xD;&#xA;if exists (select 1 from sys.databases d where d.name = 'TemporaryTestDatabase')&#xD;&#xA;begin&#xD;&#xA;	alter database [TemporaryTestDatabase] set single_user with rollback immediate&#xD;&#xA;	drop database [TemporaryTestDatabase]&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;create database [TemporaryTestDatabase]&#xD;&#xA;alter database [TemporaryTestDatabase] modify file (name = N'TemporaryTestDatabase', size = 1000MB, filegrowth = 10%)&#xD;&#xA;alter database [TemporaryTestDatabase] modify file (name = N'TemporaryTestDatabase_log', size = 1000MB, filegrowth = 10%)&#xD;&#xA;" type="Setup" description="Create new test database." enabled="True" delayAfterCompletion="0" includeInResults="False" />
	<task name="Create test tables" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;create table dbo.LargeTestTable&#xD;&#xA;(&#xD;&#xA;	col1 int identity(1, 1) not null,&#xD;&#xA;	col2 char(8000) not null&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;create table dbo.SmallTestTable&#xD;&#xA;(&#xD;&#xA;	col1 int identity(1, 1) not null,&#xD;&#xA;	col2 char(4) not null&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;create table dbo.LargeTestTableRnd&#xD;&#xA;(&#xD;&#xA;	id int identity(1, 1) not null,&#xD;&#xA;	col1 int not null,&#xD;&#xA;	col2 char(8000) not null&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;create table dbo.SmallTestTableRnd&#xD;&#xA;(&#xD;&#xA;	id int identity(1, 1) not null,&#xD;&#xA;	col1 int not null,&#xD;&#xA;	col2 char(4) not null&#xD;&#xA;)&#xD;&#xA;" type="Setup" description="" enabled="True" delayAfterCompletion="0" includeInResults="False" />
	<task name="Pre allocate data and index creation" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;declare @i int&#xD;&#xA;&#xD;&#xA;-- LargeTestTable&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 80000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.LargeTestTable (col2)&#xD;&#xA;	values ('test')&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;create unique clustered index ix_col1large on dbo.LargeTestTable (col1)&#xD;&#xA;&#xD;&#xA;-- SmallTestTable&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 800000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.SmallTestTable (col2)&#xD;&#xA;	values ('test')&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;create unique clustered index ix_col1small on dbo.SmallTestTable (col1)&#xD;&#xA;&#xD;&#xA;-- LargeTestTableRnd&#xD;&#xA;insert into dbo.LargeTestTableRnd (col1, col2)&#xD;&#xA;select t.col1, t.col2&#xD;&#xA;from dbo.LargeTestTable t&#xD;&#xA;order by newid()&#xD;&#xA;&#xD;&#xA;create unique clustered index ix_idlargeRnd on dbo.LargeTestTableRnd (id)&#xD;&#xA;create unique nonclustered index ix_col1largeRnd on dbo.LargeTestTableRnd (col1)&#xD;&#xA;&#xD;&#xA;-- SmallTestTableRnd&#xD;&#xA;insert into dbo.SmallTestTableRnd (col1, col2)&#xD;&#xA;select t.col1, t.col2&#xD;&#xA;from dbo.SmallTestTable t&#xD;&#xA;order by newid()&#xD;&#xA;&#xD;&#xA;create unique clustered index ix_idsmallRnd on dbo.SmallTestTableRnd (id)&#xD;&#xA;create unique nonclustered index ix_col1smallRnd on dbo.SmallTestTableRnd (col1)&#xD;&#xA;" type="Setup" description="Pre allocate data to expand data- and log files." enabled="True" delayAfterCompletion="0" includeInResults="False" />
	<task name="Large sequential writes" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;truncate table dbo.LargeTestTable&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 80000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.LargeTestTable (col2)&#xD;&#xA;	values ('test')&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Large sequential reads" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;declare @out char(8000)&#xD;&#xA;&#xD;&#xA;while @i &lt;= 80000&#xD;&#xA;begin&#xD;&#xA;	select @out = t.col2&#xD;&#xA;	from dbo.LargeTestTable t&#xD;&#xA;	where t.col1 = @i&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Large random writes" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;truncate table dbo.LargeTestTable&#xD;&#xA;&#xD;&#xA;set identity_insert dbo.LargeTestTable on&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 80000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.LargeTestTable (col1, col2)&#xD;&#xA;	select r.col1, r.col2&#xD;&#xA;	from dbo.LargeTestTableRnd r&#xD;&#xA;	where r.id = @i&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;set identity_insert dbo.LargeTestTable off&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Large random reads" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;declare @out char(8000)&#xD;&#xA;&#xD;&#xA;while @i &lt;= 80000&#xD;&#xA;begin&#xD;&#xA;	select @out = t.col2&#xD;&#xA;	from dbo.LargeTestTableRnd t&#xD;&#xA;	where t.col1 = @i&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Small sequential writes" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;truncate table dbo.SmallTestTable&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 800000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.SmallTestTable (col2)&#xD;&#xA;	values ('test')&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Small sequential reads" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;declare @out char(4)&#xD;&#xA;&#xD;&#xA;while @i &lt;= 800000&#xD;&#xA;begin&#xD;&#xA;	select @out = t.col2&#xD;&#xA;	from dbo.SmallTestTable t&#xD;&#xA;	where t.col1 = @i&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Small random writes" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;truncate table dbo.SmallTestTable&#xD;&#xA;&#xD;&#xA;set identity_insert dbo.SmallTestTable on&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 800000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.SmallTestTable (col1, col2)&#xD;&#xA;	select r.col1, r.col2&#xD;&#xA;	from dbo.SmallTestTableRnd r&#xD;&#xA;	where r.id = @i&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;set identity_insert dbo.SmallTestTable off&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Small random reads" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;-- Clear Buffer Pool&#xD;&#xA;checkpoint&#xD;&#xA;dbcc dropcleanbuffers with no_infomsgs&#xD;&#xA;&#xD;&#xA;-- Clear Plan Cache&#xD;&#xA;dbcc freeproccache with no_infomsgs&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #DummyPlaceHolder&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;drop table #DummyPlaceHolder&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #BeforeSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;declare @out char(4)&#xD;&#xA;&#xD;&#xA;while @i &lt;= 800000&#xD;&#xA;begin&#xD;&#xA;	select @out = t.col2&#xD;&#xA;	from dbo.SmallTestTableRnd t&#xD;&#xA;	where t.col1 = @i&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;checkpoint&#xD;&#xA;&#xD;&#xA;select file_name(dm.file_id) filename, dm.sample_ms, dm.num_of_reads, dm.num_of_bytes_read, dm.io_stall_read_ms, dm.num_of_writes, dm.num_of_bytes_written, dm.io_stall_write_ms&#xD;&#xA;into #AfterSnapshot&#xD;&#xA;from sys.dm_io_virtual_file_stats(db_id(db_name()), null) dm&#xD;&#xA;&#xD;&#xA;create table #Results&#xD;&#xA;(&#xD;&#xA;	id int identity (1, 1),&#xD;&#xA;	filename nvarchar(128),&#xD;&#xA;	sample_ms bigint,&#xD;&#xA;	num_of_reads bigint,&#xD;&#xA;	num_of_bytes_read bigint,&#xD;&#xA;	io_stall_read_ms bigint,&#xD;&#xA;	num_of_writes bigint,&#xD;&#xA;	num_of_bytes_written bigint,&#xD;&#xA;	io_stall_write_ms bigint,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;declare @results int&#xD;&#xA;&#xD;&#xA;insert into #Results (filename, sample_ms, num_of_reads, num_of_bytes_read, io_stall_read_ms, num_of_writes, num_of_bytes_written, io_stall_write_ms)&#xD;&#xA;select b.filename, a.sample_ms - b.sample_ms sample_ms, a.num_of_reads - b.num_of_reads num_of_reads, a.num_of_bytes_read - b.num_of_bytes_read num_of_bytes_read, a.io_stall_read_ms - b.io_stall_read_ms io_stall_read_ms, a.num_of_writes - b.num_of_writes num_of_writes, a.num_of_bytes_written - b.num_of_bytes_written num_of_bytes_written, a.io_stall_write_ms - b.io_stall_write_ms io_stall_write_ms&#xD;&#xA;from #BeforeSnapshot b&#xD;&#xA;inner join #AfterSnapshot a on a.filename = b.filename&#xD;&#xA;&#xD;&#xA;set @results = @@rowcount&#xD;&#xA;&#xD;&#xA;declare @executiontime bigint&#xD;&#xA;select @executiontime = r.sample_ms&#xD;&#xA;from #Results r&#xD;&#xA;where r.id = 1&#xD;&#xA;&#xD;&#xA;declare @xml varchar(max)&#xD;&#xA;set @xml = ''&#xD;&#xA;&#xD;&#xA;declare @r int&#xD;&#xA;set @r = 1&#xD;&#xA;&#xD;&#xA;while @r &lt;= @results&#xD;&#xA;begin&#xD;&#xA;	set @xml = @xml +&#xD;&#xA;	(&#xD;&#xA;		select r.filename, r.num_of_reads, r.num_of_bytes_read, r.io_stall_read_ms, r.num_of_writes, r.num_of_bytes_written, r.io_stall_write_ms&#xD;&#xA;		from #Results r&#xD;&#xA;		where r.id = @r&#xD;&#xA;		for xml raw&#xD;&#xA;	)&#xD;&#xA;&#xD;&#xA;	set @r = @r + 1&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;print '&lt;rows executiontime=&quot;' + convert(varchar(50), @executiontime) + '&quot;&gt;' + @xml + '&lt;/rows&gt;'&#xD;&#xA;&#xD;&#xA;drop table #BeforeSnapshot, #AfterSnapshot, #Results&#xD;&#xA;" type="Normal" description="" enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Drop test database" sql="use [master]&#xD;&#xA;&#xD;&#xA;alter database [TemporaryTestDatabase] set single_user with rollback immediate&#xD;&#xA;drop database [TemporaryTestDatabase]&#xD;&#xA;" type="Teardown" description="Remove the test database." enabled="True" delayAfterCompletion="0" includeInResults="False" />
</tasks>