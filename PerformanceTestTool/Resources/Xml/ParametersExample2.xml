<?xml version="1.0" encoding="utf-8"?>
<tasks description="Shows an example of how to get uniform distributed values based on parameters." connections="50" timeBetweenConnections="0" performanceCountersSamplingInterval="0" mode="Parallel" usePooling="True" minPooling="0" maxPooling="100">
	<task name="Create test database" sql="use [master]&#xD;&#xA;&#xD;&#xA;if exists (select 1 from sys.databases d where d.name = 'TemporaryTestDatabase')&#xD;&#xA;begin&#xD;&#xA;	alter database [TemporaryTestDatabase] set single_user with rollback immediate&#xD;&#xA;	drop database [TemporaryTestDatabase]&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;create database [TemporaryTestDatabase]&#xD;&#xA;" type="Setup" description="Create new test database." enabled="True" delayAfterCompletion="0" includeInResults="False" />
	<task name="Create tables" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;create table dbo.TestDataTable&#xD;&#xA;(&#xD;&#xA;	UserId int not null,&#xD;&#xA;	SomeValue varchar(50) not null&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;create table dbo.UserTable&#xD;&#xA;(&#xD;&#xA;	Id int not null,&#xD;&#xA;	UserId int not null&#xD;&#xA;)&#xD;&#xA;" type="Setup" description="" enabled="True" delayAfterCompletion="0" includeInResults="False" />
	<task name="Insert data in TestDataTable" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 10000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.TestDataTable (UserId, SomeValue)&#xD;&#xA;	values ((round(rand() * 9999, 0) + 1) * 2, newid())&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;" type="Setup" description="Insert random UserId between 2 and 10000 into TestDataTable." enabled="True" delayAfterCompletion="0" includeInResults="False" />
	<task name="Insert data in UserTable" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;declare @i int&#xD;&#xA;set @i = 1&#xD;&#xA;&#xD;&#xA;while @i &lt;= 10000&#xD;&#xA;begin&#xD;&#xA;	insert into dbo.UserTable (Id, UserId)&#xD;&#xA;	values (@i, @i * 2)&#xD;&#xA;&#xD;&#xA;	set @i = @i + 1&#xD;&#xA;end&#xD;&#xA;" type="Setup" description="Insert 10000 rows with UserId's between 2 and 20000." enabled="True" delayAfterCompletion="0" includeInResults="False" />
	<task name="Get uniform distributed values based on parameters" sql="use [TemporaryTestDatabase]&#xD;&#xA;&#xD;&#xA;declare @UserId int&#xD;&#xA;declare @NumberOfUsers int&#xD;&#xA;select @NumberOfUsers = count(*)&#xD;&#xA;from dbo.UserTable with (nolock)&#xD;&#xA;&#xD;&#xA;select @UserId = t.UserId&#xD;&#xA;from&#xD;&#xA;(&#xD;&#xA;	select row_number() over (order by u.Id) Id, u.UserId&#xD;&#xA;	from dbo.UserTable u with (nolock)&#xD;&#xA;	where u.Id % (@NumberOfUsers / {totalconnections}) = 0&#xD;&#xA;) t&#xD;&#xA;where t.Id = {connection}&#xD;&#xA;&#xD;&#xA;declare @value int&#xD;&#xA;&#xD;&#xA;select @value = count(*)&#xD;&#xA;from TestDataTable t&#xD;&#xA;where t.UserId = @UserId&#xD;&#xA;and t.SomeValue like '%e%'&#xD;&#xA;&#xD;&#xA;print 'UserId: ' + convert(varchar(10), @UserId)&#xD;&#xA;print 'Match: ' + convert(varchar(10), @value)&#xD;&#xA;" type="Normal" description="Get 50 uniform distributed UserID's from UserTable." enabled="True" delayAfterCompletion="0" includeInResults="True" />
	<task name="Drop test database" sql="use [master]&#xD;&#xA;&#xD;&#xA;alter database [TemporaryTestDatabase] set single_user with rollback immediate&#xD;&#xA;drop database [TemporaryTestDatabase]&#xD;&#xA;" type="Teardown" description="Remove the test database." enabled="True" delayAfterCompletion="0" includeInResults="False" />
</tasks>